package main

import (
	"bufio"
	"fmt"
	"os"
)

// Estructura del nodo
type Node struct {
	Value string
	Child []*Node
}

// Estructura del arbol
type Tree struct {
	start, top *Node
}

var valid bool = true
var cnt int
var input []byte

// Recorre el árbol de forma infija (in-order) (modificada)
func inorderTraversal(node *Node) {
	if node == nil {
		return
	}

	if len(node.Child) > 0 {
		for _, child := range node.Child {
			inorderTraversal(child) // Recorre los otros hijos del nodo actual
		}
	} else {
		if input[cnt] != []byte(node.Value)[0] {
			fmt.Println("NDO")
			valid = false
		}
		fmt.Printf("%s ", node.Value)
		cnt++
	}
}

func main() {

	// pedir datos
	scanner := bufio.NewScanner(os.Stdin)
	fmt.Printf("Ingresa la cadena a reconocer: ")
	scanner.Scan()
	input = scanner.Bytes()

	// Raiz del arbol
	root := &Node{
		Value: "S",
		Child: []*Node{
			{
				Value: "M",
				Child: []*Node{
					{
						Value: "x",
						Child: nil,
					},
					{
						Value: "Z",
						Child: []*Node{
							{
								Value: "b",
								Child: nil,
							},
							{
								Value: "a",
								Child: nil,
							},
						},
					},
					{
						Value: "b",
						Child: nil,
					},
				},
			},
			{
				Value: "N",
				Child: []*Node{
					{
						Value: "b",
						Child: nil,
					},
				},
			},
			{
				Value: "Z",
				Child: []*Node{
					{
						Value: "X",
						Child: []*Node{
							{
								Value: "a",
								Child: nil,
							},
						},
					},
					{
						Value: "N",
						Child: []*Node{
							{
								Value: "a",
								Child: nil,
							},
							{
								Value: "b",
								Child: nil,
							},
							{
								Value: "x",
								Child: nil,
							},
						},
					},
				},
			},
		},
	}

	// Realizar la búsqueda infija en el árbol
	fmt.Print("Búsqueda: ")
	inorderTraversal(root)
	fmt.Println()
	fmt.Printf("Expresión válida: %v\n", valid)
}

